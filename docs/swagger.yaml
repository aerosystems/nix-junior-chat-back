basePath: /
definitions:
  handlers.LoginRequestBody:
    properties:
      password:
        example: P@ssw0rd
        type: string
      username:
        example: username
        type: string
    type: object
  handlers.MessageResponseBody:
    properties:
      content:
        example: bla-bla-bla
        type: string
      recipientId:
        example: 1
        type: integer
    type: object
  handlers.RefreshTokenRequestBody:
    properties:
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  handlers.RegistrationRequestBody:
    properties:
      password:
        example: P@ssw0rd
        type: string
      username:
        example: username
        type: string
    type: object
  handlers.Response:
    properties:
      data: {}
      error:
        example: false
        type: boolean
      message:
        example: success operation
        type: string
    type: object
  handlers.TokensResponseBody:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  handlers.UpdatePasswordRequestBody:
    properties:
      newPassword:
        example: NewP@ssw0rd
        type: string
      oldPassword:
        example: OldP@ssw0rd
        type: string
    type: object
  handlers.UpdateUsernameRequestBody:
    properties:
      username:
        example: username
        type: string
    type: object
  models.Chat:
    properties:
      id:
        example: 1
        type: integer
      type:
        description: private, group
        example: private
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Message:
    properties:
      chatId:
        example: 1
        type: integer
      content:
        example: bla-bla-bla
        type: string
      createdAt:
        example: 1620000000
        type: integer
      id:
        example: 1
        type: integer
      sender:
        $ref: '#/definitions/models.User'
      senderId:
        example: 2
        type: integer
      status:
        description: sent, delivered, read
        example: sent
        type: string
      type:
        description: text, error, system
        example: text
        type: string
    type: object
  models.User:
    properties:
      blockedUsers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      chats:
        items:
          $ref: '#/definitions/models.Chat'
        type: array
      followedUsers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      id:
        example: 1
        type: integer
      image:
        example: image.png
        type: string
      isOnline:
        example: true
        type: boolean
      updatedAt:
        example: "2024-01-01T12:00:00.000Z"
        type: string
      username:
        example: username
        type: string
    type: object
host: localhost:80
info:
  contact:
    name: Artem Kostenko
    url: https://github.com/aerosystems
  description: Backend App for simple social Live Chat
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: 'NIX Junior: Chat App'
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: |-
        Username should contain:
        - lower, upper case latin letters and digits
        - minimum 8 characters length
        - maximum 40 characters length
        Password should contain:
        - minimum of one small case letter
        - minimum of one upper case letter
        - minimum of one digit
        - minimum of one special character
        - minimum 8 characters length
        - maximum 40 characters length
        Response contain pair JWT token_service, use /v1/token_service/refresh for updating them
      parameters:
      - description: raw request body
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.TokensResponseBody'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: login user by credentials
      tags:
      - auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: logout user
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: |-
        Username should contain:
        - lower, upper case latin letters and digits
        - minimum 8 characters length
        - maximum 40 characters length
        Password should contain:
        - minimum of one small case letter
        - minimum of one upper case letter
        - minimum of one digit
        - minimum of one special character
        - minimum 8 characters length
        - maximum 40 characters length
      parameters:
      - description: raw request body
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.RegistrationRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: registration user by credentials
      tags:
      - auth
  /v1/chat/{chat_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Chat ID
        in: path
        name: chat_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Delete Chat by ChatID
      tags:
      - chat
  /v1/chat/messages/{chat_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Chat ID
        in: path
        name: chat_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Message'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get messages from chat by ChatId
      tags:
      - chat
  /v1/search:
    get:
      consumes:
      - application/json
      description: Search users by username with autocomplete
      parameters:
      - description: query string for search by username, minimum 1 character, maximum
          40 characters
        in: query
        name: q
        required: true
        type: string
      - description: 'type of search, default: ''user'', available: ''user'', ''friend'',
          ''blacklist'''
        in: query
        name: type
        type: string
      - description: 'order of search, default: ''asc'', available: ''asc'', ''desc'''
        in: query
        name: order
        type: string
      - description: 'limit of search, default: ''10'', available: ''1-1000'''
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: search users
      tags:
      - search
  /v1/token/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: raw request body, should contain Refresh Token
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.TokensResponseBody'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: refresh pair JWT token_service
      tags:
      - token_service
  /v1/user:
    get:
      consumes:
      - application/json
      description: Get user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get user data
      tags:
      - user
  /v1/user/{user_id}/block:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Unblocked User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Unblock user
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: Blocked User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - user
  /v1/user/{user_id}/chat:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Chat'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get Chat by User ID
      tags:
      - chat
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Chat'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Create Chat by User ID
      tags:
      - chat
  /v1/user/{user_id}/follow:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Followed User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Unfollow user
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: Followed User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Follow user
      tags:
      - user
  /v1/user/update-password:
    put:
      consumes:
      - application/json
      description: |-
        OldPassword/NewPassword should contain:
        - minimum of one small case letter
        - minimum of one upper case letter
        - minimum of one digit
        - minimum of one special character
        - minimum 8 characters length
        - maximum 40 characters length
      parameters:
      - description: raw request body
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePasswordRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: update password
      tags:
      - user
  /v1/user/update-username:
    put:
      consumes:
      - application/json
      description: |-
        Username should contain:
        - lower, upper case latin letters and digits
        - minimum 8 characters length
        - maximum 40 characters length
      parameters:
      - description: raw request body
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUsernameRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: update username
      tags:
      - user
  /v1/user/upload-image:
    post:
      description: Uploading user image as file by form-data "image"
      parameters:
      - description: 'User image file. The preferred size is 315x315px because the
          image will resize to 315x315px. Max size: 2MB, Allowed types: ''jpg'', ''jpeg'',
          ''png'', ''gif'''
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Upload user image
      tags:
      - user
  /ws/chat:
    get:
      description: Chat with users based on WebSocket
      parameters:
      - description: Access JWT Token
        in: query
        name: token
        required: true
        type: string
      - description: body should contain content and recipient_id for sending message
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/handlers.MessageResponseBody'
      responses:
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Chat [WebSocket]
      tags:
      - chat
securityDefinitions:
  BearerAuth:
    description: Should contain Access JWT Token, with the Bearer started
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
