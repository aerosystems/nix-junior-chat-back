version: '3'

services:
  nginx-proxy:
    container_name: "nginx-proxy"
    restart: unless-stopped
    depends_on:
      - chat-service
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "/etc/nginx/certs"

  letsencrypt-nginx-proxy-companion:
    container_name: "letsencrypt-nginx-proxy-companion"
    restart: unless-stopped
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    volumes_from:
      - "nginx-proxy"

  # Golang binary chat-service
  chat-service:
    container_name: chat-service
    build:
      context: ./
      dockerfile: ./Dockerfile
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    deploy:
      mode: replicated
      replicas: 1
    environment:
      CODE_EXP_MINUTES: ${CODE_EXP_MINUTES}
      GOOGLEMAIL_DOMAINS: ${GOOGLEMAIL_DOMAINS}
      MYSQL_DSN: ${MYSQL_DSN}
      REDIS_DSN: ${REDIS_DSN}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ACCESS_SECRET: ${ACCESS_SECRET}
      ACCESS_EXP_MINUTES: ${ACCESS_EXP_MINUTES}
      REFRESH_SECRET: ${REFRESH_SECRET}
      REFRESH_EXP_MINUTES: ${REFRESH_EXP_MINUTES}
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST}
      
  # MySQL
  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: unless-stopped
    command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    expose:
      - '3306'
    volumes:
      - './db/mysql/data:/var/lib/mysql'
      - './db/mysql/my.cnf:/etc/mysql/conf.d/my.cnf'
      - './db/mysql/sql:/docker-entrypoint-initdb.d'

  # Redis
  redis:
   container_name: redis
   image: 'redis:6.2-alpine'
   restart: unless-stopped
   expose:
     - "6379"
   command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
   volumes: 
      - './db/redis:/data'